// Usage:
// Comment out rustflags in mmtk-openjdk, and run:
// ./mmtk-core/tools/tracing/run.py -b /opt/bpftrace/bpftrace-0.19.1-static -m /home/wenyuz/MMTk-Dev/openjdk/build/linux-x86_64-normal-server-release/jdk/lib/server/libmmtk_openjdk.so -H lxr_work > ebpf-cassandra.log

config = {
    max_map_keys=2000000
}

BEGIN {
    @harness = 1;
    @gc_count = 0;
    if (!@harness) {
        @stats_enabled = 1;
    }
}

END {
    system("rm $TMP_FILE");
}

// MMTk Event Format:
// @mmtk_event_xxx[(tid, $ns)] = (B/E, work-id, rest)

usdt:$MMTK:mmtk:harness_begin {
    if (@harness) {
        //begin collecting data at harness_begin (start of final iteration)
        @stats_enabled = 1;
    }
}

usdt:$MMTK:mmtk:harness_end {
    if (@harness) {
        //end data at harness_end (end of final iteration)
        @stats_enabled = 0;
        exit();
    }
}

// Work packet start
usdt:$MMTK:mmtk:work {
    $ns = nsecs;
    $work_name = str(arg0, arg1);
    printf("%p %d %s\n", arg0, arg1, $work_name);
    @thread_in_work[tid] = 1;
    if (!(@decoded[arg0])) {
        @type_name[arg0] = $work_name;
        @decoded[arg0] = 1;
    }
    @thread_work_id[tid] = arg0;
    if (@stats_enabled) {
        @mmtk_event_work[tid,$ns] = (0, @thread_work_id[tid], "");
    }
}

// Work packet end
usdt:$MMTK:mmtk:work_poll {
    $ns = nsecs;
    //printf("WORK_POLL,B,%d,%lu\n", tid, $ns);
    if (@thread_in_work[tid]) {
        if (@stats_enabled) {
            @mmtk_event_work[tid,$ns] = (1, @thread_work_id[tid], "");
        }
    }
}

usdt:$MMTK:mmtk:gc_start {
    $ns = nsecs;

        if (@stats_enabled) {
    printf("GC,B,%d,%lu\n", tid, nsecs);
    @gc_count += 1;
    @mmtk_event_gc[tid,$ns] = (0, 0, "");
        }
}

usdt:$MMTK:mmtk:gc_end {

        if (@stats_enabled) {
    printf("GC,E,%d,%lu\n", tid, nsecs);
    $ns = nsecs;
    @mmtk_event_gc[tid,$ns] = (1, 0, "");
        }
}
